version: "3.8"

services:
  # Base de données PostgreSQL
  db:
    image: postgres:15-alpine
    container_name: sportmap_db_dev
    environment:
      POSTGRES_USER: sportadmin
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres123}
      POSTGRES_DB: sport
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sportadmin"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Django - Utilise le Dockerfile existant mais modifié pour le développement
  backend:
    build: 
      context: ../Backend
      dockerfile: Dockerfile
    container_name: sportmap_backend_dev
    environment:
      - DATABASE_URL=postgresql://sportadmin:${DB_PASSWORD:-postgres123}@db:5432/sport
      - DEBUG=True
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key-change-in-production}
      - ALLOWED_HOSTS=localhost,127.0.0.1,backend,0.0.0.0
      - PORT=8000
    ports:
      - "8000:8000"
    volumes:
      - ../Backend:/app
      - backend_static:/app/staticfiles
    depends_on:
      db:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        until pg_isready -h db -p 5432 -U sportadmin; do
          echo 'Waiting for PostgreSQL...'; sleep 1;
        done;
        python manage.py makemigrations installations;
        python manage.py migrate;
        python manage.py load_csv data/filtered-data-es.csv || true;
        python manage.py collectstatic --noinput;
        python manage.py runserver 0.0.0.0:8000
      "

  # Frontend React - Version développement avec hot reload
  frontend:
    build:
      context: ../Frontend
      dockerfile: Dockerfile
      target: builder  # Utilise seulement le stage builder pour le développement
    container_name: sportmap_frontend_dev
    environment:
      - VITE_MAPBOX_TOKEN=${VITE_MAPBOX_TOKEN:-your-mapbox-token}
      - VITE_API_URL=${VITE_API_URL:-http://localhost:8000}
      - NODE_ENV=development
    ports:
      - "5173:5173"
    volumes:
      - ../Frontend:/app
      - /app/node_modules  # Volume anonyme pour node_modules
    depends_on:
      - backend
    command: npm run dev -- --host 0.0.0.0 --port 5173

  # Interface pgAdmin pour gérer la base de données
  adminer:
    image: adminer:latest
    container_name: sportmap_adminer_dev
    ports:
      - "8080:8080"
    depends_on:
      - db
    environment:
      - ADMINER_DEFAULT_SERVER=db

volumes:
  postgres_data:
  backend_static: